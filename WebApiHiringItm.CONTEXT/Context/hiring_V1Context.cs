// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using WebApiHiringItm.CONTEXT.Context;
using WebApiHiringItm.MODEL.Entities;

namespace WebApiHiringItm.CONTEXT.Context
{
    public partial class Hiring_V1Context : DbContext,IHiring_V1Context
    {
        public Hiring_V1Context()
        {
        }

        public Hiring_V1Context(DbContextOptions<Hiring_V1Context> options)
            : base(options)
        {
        }
        public virtual DbSet<Component> Component { get; set; }
        public virtual DbSet<Contractor> Contractor { get; set; }
        public virtual DbSet<ContractorPayments> ContractorPayments { get; set; }
        public virtual DbSet<EconomicdataContractor> EconomicdataContractor { get; set; }
        public virtual DbSet<Files> Files { get; set; }
        public virtual DbSet<FolderContractor> FolderContractor { get; set; }
        public virtual DbSet<HiringData> HiringData { get; set; }
        public virtual DbSet<Planning> Planning { get; set; }
        public virtual DbSet<ProjectFolder> ProjectFolder { get; set; }
        public virtual DbSet<Roll> Roll { get; set; }
        public virtual DbSet<SharedData> SharedData { get; set; }
        public virtual DbSet<UserT> UserT { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Component>(entity =>
            {
                entity.Property(e => e.ContractorCant).HasColumnName("contractorCant");

                entity.Property(e => e.TotalValue)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("totalValue");

                entity.Property(e => e.UnitValue)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("unitValue");

                entity.HasOne(d => d.Planing)
                    .WithMany(p => p.Component)
                    .HasForeignKey(d => d.PlaningId)
                    .HasConstraintName("FK__Component__Plani__46E78A0C");
            });

            modelBuilder.Entity<Contractor>(entity =>
            {
                entity.Property(e => e.Arl)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Bachiller)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Barrio)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Celular)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ClaveUsuario)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Componente)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Comuna)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Convenio)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Correo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CuentaBancaria)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Departamento)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Direccion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Doctorado)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DocumentoDeIdentificacion)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Entidad)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EntidadCuentaBancaria)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Eps)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Especializacion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaActualizacion).HasColumnType("date");

                entity.Property(e => e.FechaCreacion).HasColumnType("date");

                entity.Property(e => e.FechaFinalizacionConvenio).HasColumnType("date");

                entity.Property(e => e.FechaInicioConvenio).HasColumnType("date");

                entity.Property(e => e.FechaNacimiento).HasColumnType("date");

                entity.Property(e => e.LugarDeExpedicion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Maestria)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Municipio)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nacionalidad)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.No)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NombreCompleto)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ObjetoConvenio).IsUnicode(false);

                entity.Property(e => e.Pension).HasMaxLength(30);

                entity.Property(e => e.Pregrado)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Sexo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TalentoHumano)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Tecnico)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Tecnologo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Telefono)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TipoDeCuenta)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.Contract)
                    .WithMany(p => p.Contractor)
                    .HasForeignKey(d => d.ContractId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Contracto__Contr__4316F928");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Contractor)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Contracto__UserI__4222D4EF");
            });

            modelBuilder.Entity<ContractorPayments>(entity =>
            {
                entity.Property(e => e.ModifyDate)
                    .HasColumnType("date")
                    .HasColumnName("modifyDate");

                entity.Property(e => e.MonthPayment)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("monthPayment");

                entity.Property(e => e.Paymentcant)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("paymentcant");

                entity.Property(e => e.RegisterDate)
                    .HasColumnType("date")
                    .HasColumnName("registerDate");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.HasOne(d => d.Contractor)
                    .WithMany(p => p.ContractorPayments)
                    .HasForeignKey(d => d.ContractorId)
                    .HasConstraintName("FK__Contracto__Contr__44FF419A");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.ContractorPayments)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK__Contracto__userI__45F365D3");
            });

            modelBuilder.Entity<EconomicdataContractor>(entity =>
            {
                entity.Property(e => e.Debt)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("debt");

                entity.Property(e => e.Freed)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("freed");

                entity.Property(e => e.Missing).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.ModifyDate).HasColumnType("date");

                entity.Property(e => e.RegisterDate).HasColumnType("date");

                entity.Property(e => e.TotalPaidMonth).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.TotalValue).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.UnitValue).HasColumnType("decimal(18, 0)");

                entity.HasOne(d => d.IdContractorNavigation)
                    .WithMany(p => p.EconomicdataContractor)
                    .HasForeignKey(d => d.IdContractor)
                    .HasConstraintName("FK__Economicd__IdCon__48CFD27E");
            });

            modelBuilder.Entity<Files>(entity =>
            {
                entity.Property(e => e.DescriptionFile)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("descriptionFile");

                entity.Property(e => e.Filedata)
                    .IsUnicode(false)
                    .HasColumnName("filedata");

                entity.Property(e => e.FilesName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("filesName");

                entity.Property(e => e.ModifyDate)
                    .HasColumnType("date")
                    .HasColumnName("modifyDate");

                entity.Property(e => e.Passed).HasColumnName("passed");

                entity.Property(e => e.RegisterDate)
                    .HasColumnType("date")
                    .HasColumnName("registerDate");

                entity.Property(e => e.TypeFile)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("typeFile");

                entity.HasOne(d => d.Folder)
                    .WithMany(p => p.Files)
                    .HasForeignKey(d => d.FolderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Files__FolderId__403A8C7D");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Files)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Files__UserId__412EB0B6");
            });

            modelBuilder.Entity<FolderContractor>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.DescriptionProject)
                    .IsUnicode(false)
                    .HasColumnName("descriptionProject");

                entity.Property(e => e.FolderName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("folderName");

                entity.Property(e => e.ModifyDate)
                    .HasColumnType("date")
                    .HasColumnName("modifyDate");

                entity.Property(e => e.RegisterDate)
                    .HasColumnType("date")
                    .HasColumnName("registerDate");

                entity.HasOne(d => d.Contractor)
                    .WithMany(p => p.FolderContractor)
                    .HasForeignKey(d => d.ContractorId)
                    .HasConstraintName("FK__FolderCon__Contr__3F466844");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.FolderContractor)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__FolderCon__UserI__3E52440B");
            });

            modelBuilder.Entity<HiringData>(entity =>
            {
                entity.Property(e => e.ActaComite).IsUnicode(false);

                entity.Property(e => e.Actividad)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Arl)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("arl");

                entity.Property(e => e.CargoInterventorItm)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Compromiso)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Consecutivo)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("consecutivo");

                entity.Property(e => e.Contrato)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Cpc)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CuentaBancaria)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cuentaBancaria");

                entity.Property(e => e.Ejecucion)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Encabezado)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.EntidadCuentaBancaria)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("entidadCuentaBancaria");

                entity.Property(e => e.Eps)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("eps");

                entity.Property(e => e.FechaDeComite).HasColumnType("date");

                entity.Property(e => e.FechaDeContrato).HasColumnType("date");

                entity.Property(e => e.FechaDeInicioProyectado).HasColumnType("date");

                entity.Property(e => e.FechaDeTerminacionAmpliacion).HasColumnType("date");

                entity.Property(e => e.FechaExaPreocupacional)
                    .HasColumnType("date")
                    .HasColumnName("fechaExaPreocupacional");

                entity.Property(e => e.FechaExpedicionPoliza).HasColumnType("date");

                entity.Property(e => e.FechaFinalizacion).HasColumnType("date");

                entity.Property(e => e.FechaFinalizacionConvenio).HasColumnType("date");

                entity.Property(e => e.FechaInicioAmpliacion).HasColumnType("date");

                entity.Property(e => e.FechaRealDeInicio).HasColumnType("date");

                entity.Property(e => e.InterventorItm)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NoAdicion)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NoPoliza)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NombreCpc)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NombreDelRubro)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Pension)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("pension");

                entity.Property(e => e.RubroPresupuestal)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TipoCuenta)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("tipoCuenta");

                entity.Property(e => e.ValorAsegurado)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("ValorASegurado");

                entity.Property(e => e.VigenciaFinal).HasColumnType("date");

                entity.Property(e => e.VigenciaInicial).HasColumnType("date");

                entity.HasOne(d => d.Contractor)
                    .WithMany(p => p.HiringData)
                    .HasForeignKey(d => d.ContractorId)
                    .HasConstraintName("FK__HiringDat__Contr__3D5E1FD2");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.HiringData)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK__HiringDat__UserI__3C69FB99");
            });


            modelBuilder.Entity<Planning>(entity =>
            {
                entity.ToTable("planning");

                entity.Property(e => e.Consecutive)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ContractorCant).HasColumnName("contractorCant");

                entity.Property(e => e.Laboral)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Objeto)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Profesional)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TotalValue).HasColumnType("decimal(18, 0)");

                entity.HasOne(d => d.ProjectFolder)
                    .WithMany(p => p.Planning)
                    .HasForeignKey(d => d.ProjectFolderId)
                    .HasConstraintName("FK__planning__Projec__47DBAE45");
            });

            modelBuilder.Entity<ProjectFolder>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CompanyName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Cpc)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DescriptionProject).IsUnicode(false);

                entity.Property(e => e.ModifyDate).HasColumnType("date");

                entity.Property(e => e.NombreCpc)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectName)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.RegisterDate).HasColumnType("date");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.ProjectFolder)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__ProjectFo__UserI__3B75D760");
            });

            modelBuilder.Entity<Roll>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.RollName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("rollName");
            });

            modelBuilder.Entity<SharedData>(entity =>
            {
                entity.ToTable("sharedData");

                entity.Property(e => e.AdditionalData).IsUnicode(false);

                entity.Property(e => e.DescriptionData).IsUnicode(false);

                entity.Property(e => e.TypeDataShare)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TypedataRegistered)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<UserT>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Avatar)
                    .IsUnicode(false)
                    .HasColumnName("avatar");

                entity.Property(e => e.IdRoll).HasColumnName("idRoll");

                entity.Property(e => e.PhoneNumber)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("phoneNumber");

                entity.Property(e => e.Professionalposition)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("professionalposition");

                entity.Property(e => e.UserEmail)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("userEmail");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("userName");

                entity.Property(e => e.UserPassword)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("userPassword");

                entity.HasOne(d => d.IdRollNavigation)
                    .WithMany(p => p.UserT)
                    .HasForeignKey(d => d.IdRoll)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__UserT__idRoll__440B1D61");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}