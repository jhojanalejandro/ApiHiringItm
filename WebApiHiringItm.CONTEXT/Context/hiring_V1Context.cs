// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using WebApiHiringItm.MODEL.Entities;

namespace WebApiHiringItm.CONTEXT.Context
{
    public partial class hiring_V1Context : DbContext,IHiring_V1Context
    {
        public hiring_V1Context()
        {
        }

        public hiring_V1Context(DbContextOptions<hiring_V1Context> options)
            : base(options)
        {
        }

        public virtual DbSet<FeasibilityRequest> FeasibilityRequest { get; set; }
        public virtual DbSet<Folder> Folder { get; set; }
        public virtual DbSet<Roll> Roll { get; set; }
        public virtual DbSet<UserT> UserT { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<FeasibilityRequest>(entity =>
            {
                entity.ToTable("feasibilityRequest");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Actividad)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ACTIVIDAD");

                entity.Property(e => e.Componente)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("COMPONENTE");

                entity.Property(e => e.Consecutivo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CONSECUTIVO");

                entity.Property(e => e.Convenio)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CONVENIO");

                entity.Property(e => e.Cpc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CPC");

                entity.Property(e => e.Documentodeidentificación)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENTODEIDENTIFICACIÓN");

                entity.Property(e => e.Entidad)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ENTIDAD");

                entity.Property(e => e.Nombrecompleto)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NOMBRECOMPLETO");

                entity.Property(e => e.Nombredelrubro)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NOMBREDELRUBRO");

                entity.Property(e => e.Objeto)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("OBJETO");

                entity.Property(e => e.Rubropresupuestal)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("RUBROPRESUPUESTAL");

                entity.Property(e => e.Talentohumano)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TALENTOHUMANO");

                entity.Property(e => e.Valortotaldelcontrato)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VALORTOTALDELCONTRATO");
            });

            modelBuilder.Entity<Folder>(entity =>
            {
                entity.ToTable("folder");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.FolderName).IsUnicode(false);
            });

            modelBuilder.Entity<Roll>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.RollName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("rollName");
            });

            modelBuilder.Entity<UserT>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IdRoll).HasColumnName("idRoll");

                entity.Property(e => e.Permission).HasColumnName("permission");

                entity.Property(e => e.PhoneNumber)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("phoneNumber");

                entity.Property(e => e.UserEmail)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("userEmail");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("userName");

                entity.Property(e => e.UserPassword)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("userPassword");

                entity.HasOne(d => d.IdRollNavigation)
                    .WithMany(p => p.UserT)
                    .HasForeignKey(d => d.IdRoll)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__UserT__idRoll__3A81B327");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}